#include <sys/socket.h>
#include <sys/epoll.h>
#include <sys/sendfile.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <fcntl.h>
#include <errno.h>


#define MAX_EVENTS 10
#define LISTENQ 20
#define PORT 8888

typedef struct string{
  char buf[BUFSIZ];
} String;

int hash(int connfd){
  return connfd%LISTENQ;
}

//设置socket连接为非阻塞模式
void setnonblocking (int fd)
{
    int opts;

    opts = fcntl (fd, F_GETFL);
    if (opts < 0)
    {
        perror ("fcntl(F_GETFL)\n");
        exit (1);
    }
    opts = (opts | O_NONBLOCK);
    if (fcntl (fd, F_SETFL, opts) < 0)
    {
        perror ("fcntl(F_SETFL)\n");
        exit (1);
    }
}

int main ()
{
    struct epoll_event ev, events[MAX_EVENTS];
    int listenfd, connfd, nfds, epfd, sockfd, i, nread, n;
    struct sockaddr_in local, remote;
    socklen_t addrlen;
    char buf[BUFSIZ];
    String messages[LISTENQ];

    //创建listen socket
    if ((listenfd = socket (AF_INET, SOCK_STREAM, 0)) < 0)
    {
        perror ("sockfd\n");
        exit (1);
    }

    setnonblocking (listenfd);
    bzero (&local, sizeof (local));
    local.sin_family = AF_INET;
    local.sin_addr.s_addr = htonl (INADDR_ANY);;
    local.sin_port = htons (PORT);

    if (bind (listenfd, (struct sockaddr *) &local, sizeof (local)) < 0)
    {
        perror ("bind\n");
        exit (1);
    }

    listen (listenfd, LISTENQ);

    epfd = epoll_create (MAX_EVENTS);
    if (epfd == -1)
    {
        perror ("epoll_create");
        exit (EXIT_FAILURE);
    }
    ev.events = EPOLLIN;
    ev.data.fd = listenfd;
    if (epoll_ctl (epfd, EPOLL_CTL_ADD, listenfd, &ev) == -1)
    {
        perror ("epoll_ctl: listen_sock");
        exit (EXIT_FAILURE);
    }

    while(1)
    {
        nfds = epoll_wait (epfd, events, MAX_EVENTS, -1);
        if (nfds == -1)
        {
            perror ("epoll_wait error");
            exit (EXIT_FAILURE);
        }

        for (i = 0; i < nfds; ++i)
        {
            sockfd = events[i].data.fd;
            if (sockfd == listenfd)
            {
                while ((connfd = accept (listenfd, (struct sockaddr *) &remote, &addrlen)) > 0)
                {
                    char *ipaddr = inet_ntoa (remote.sin_addr);
                    printf("accept a connection from [%s]\n", ipaddr);
                    setnonblocking (connfd);    //设置连接socket为非阻塞
                    ev.events = EPOLLIN | EPOLLET;
                    ev.data.fd = connfd;
                    if (epoll_ctl (epfd, EPOLL_CTL_ADD, connfd, &ev) == -1)
                    {
                        perror ("epoll_ctl: add");
                        exit (EXIT_FAILURE);
                    }
                }
                if (connfd == -1)
                {
                    if (errno != EAGAIN && errno != ECONNABORTED && errno != EPROTO && errno != EINTR)
                        perror ("accept");
                }
                continue;
            }
            if (events[i].events & EPOLLIN)
            {
                n = 0;
                while ((nread = read (sockfd, buf + n, BUFSIZ - 1)) > 0)
                {
                    n += nread;
                }
                if (nread == -1 && errno != EAGAIN)
                {
                    perror ("read error");
                }
                printf("recv from client data [%s]\n", buf);
                strcpy(messages[i].buf,buf);
                ev.data.fd = sockfd;
                ev.events = events[i].events | EPOLLOUT;
                if (epoll_ctl (epfd, EPOLL_CTL_MOD, sockfd, &ev) == -1)
                {
                    perror ("epoll_ctl: mod");
                }
            }
            if (events[i].events & EPOLLOUT)
            {

                strcpy(buf, messages[i].buf);
                int nwrite, data_size = strlen (buf);
                n = data_size;
                while (n > 0)
                {
                    nwrite = write (sockfd, buf + data_size - n, n);
                    if (nwrite < n)
                    {
                        if (nwrite == -1 && errno != EAGAIN)
                        {
                            perror ("write error");
                        }
                        break;
                    }
                    n -= nwrite;
                }
                printf("send to client data [%s]\n", buf);
                close (sockfd);
                events[i].data.fd = -1;
            }
        }
    }
    close (epfd);
    close (listenfd);
    return 0;
}
